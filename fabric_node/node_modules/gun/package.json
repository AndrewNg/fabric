{
  "name": "gun",
  "version": "0.1.4",
  "author": {
    "name": "Mark Nadal"
  },
  "description": "Graph engine.",
  "engines": {
    "node": "~>0.6.6"
  },
  "dependencies": {
    "mime": "~>1.2.11",
    "aws-sdk": "~>2.0.0",
    "formidable": "~>1.0.15",
    "ws": "~>0.4.32",
    "request": "~>2.39.0"
  },
  "devDependencies": {
    "mocha": "~>1.9.0"
  },
  "scripts": {
    "start": "node examples/express.js 8080",
    "prestart": "npm install ./examples",
    "test": "mocha"
  },
  "readme": "gun [![Build Status](https://travis-ci.org/amark/gun.svg?branch=master)](https://travis-ci.org/amark/gun)\r\n===\r\n\r\nWelcome Stanford Hackathon participants! We're giving away a prize of 2 Adult Electric Scooters! To help you zip around campus/town. :)\r\n\r\n<img width=\"300\" src=\"http://ecx.images-amazon.com/images/I/71kVRVWvTxL._SL1500_.jpg\" alt=\"WIN THIS!\"/>\r\n<img width=\"300\" src=\"http://ecx.images-amazon.com/images/I/71kVRVWvTxL._SL1500_.jpg\" alt=\"WIN THIS!\"/>\r\n\r\n## Getting Started\r\n\r\nIf you do not have [node](http://nodejs.org/) or [npm](https://www.npmjs.com/), read [this](https://github.com/amark/gun/blob/master/examples/install.sh) first.\r\nThen in your terminal, run:\r\n\r\n```bash\r\nnpm install gun\r\n```\r\n\r\nNow you can require it in the app you want to build.\r\n\r\n```javascript\r\nvar Gun = require('gun');\r\n```\r\n\r\nOnce included, initialize a gun instance with a file path or your AWS S3 credentials.\r\n\r\n```javascript\r\nvar gun = Gun({\r\n\tfile: 'data.json',\r\n\ts3: { // Optional!\r\n\t\tkey: '', // AWS Access Key\r\n\t\tsecret: '', // AWS Secret Token\r\n\t\tbucket: '' // The bucket you want to save into\r\n\t}\r\n});\r\n```\r\n\r\nThese are the default persistence layers, they are modular and can be replaced others.\r\n\r\nUsing S3 is recommended for deployment, and using a file is recommended for local development.\r\n\r\nNow you can save your first object, and create a reference to it.\r\n\r\n```javascript\r\ngun.set({ hello: 'world' }).key('my/first/data');\r\n```\r\n\r\nAltogether, try it with the node hello world web server which will reply with your data.\r\n\r\n```javascript\r\nvar Gun = require('gun');\r\nvar gun = Gun({ file: 'data.json' });\r\ngun.set({ hello: 'world' }).key('my/first/data');\r\n\r\nvar http = require('http');\r\nhttp.createServer(function(req, res){\r\n\tgun.load('my/first/data', function(err, data){\r\n\t\tres.writeHead(200, {'Content-Type': 'application/json'});\r\n\t\tres.end(JSON.stringify(data));\r\n\t});\r\n}).listen(1337, '127.0.0.1');\r\nconsole.log('Server running at http://127.0.0.1:1337/');\r\n```\r\n\r\nFire up your browser and hit that URL - you'll see your data, plus some gun specific metadata.\r\n\r\n## Examples\r\n\r\nTry out some online [examples](http://gunjs.herokuapp.com/) or run them yourself with the following command:\r\n\r\n```bash\r\ngit clone http://github.com/amark/gun\r\ncd gun/examples && npm install\r\nnode express.js 8080\r\n```\r\nThen visit [http://localhost:8080](http://localhost:8080) in your browser.\r\n\r\n\r\n## API\r\n\r\nBelow is a really basic overview of how the gun API works. For a more detailed explanation with many more examples, [check out the wiki](https://github.com/amark/gun/wiki).\r\n\r\n## Setting Data\r\n\r\nIn gun, it can be helpful to think of everything as field/value pairs. For example, let's say we have a `user` object that looks like this:\r\n\r\n```json\r\n{\r\n  \"username\": \"marknadal\",\r\n  \"name\": \"Mark Nadal\",\r\n  \"email\": \"mark@gunDB.io\"\r\n}\r\n```\r\nNow, we want to save this object to a key called `usernames/marknadal`. We can do that like this:\r\n\r\n```javascript\r\ngun.set({\r\n  username: \"marknadal\",\r\n  name: \"Mark Nadal\",\r\n  email: \"mark@gunDB.io\"\r\n}).key('usernames/marknadal');\r\n```\r\n\r\nWe can also pass `set` a callback that can be used to handle errors:\r\n\r\n```javascript\r\ngun.set({\r\n  username: \"marknadal\",\r\n  name: \"Mark Nadal\",\r\n  email: \"mark@gunDB.io\"\r\n}, function(err){\r\n  // Do something to handle the error\r\n}).key('usernames/marknadal');\r\n```\r\n\r\n### Getting Data\r\n\r\nOnce we have some data stored in gun, we need a way to get them out again. Retrieving the data that we just stored would look like this:\r\n\r\n```javascript\r\ngun.load('usernames/marknadal').get(function(user){\r\n  console.log(user.name); // Prints `Mark Nadal` to the console\r\n});\r\n```\r\n\r\nBasically, this tells gun to check `usernames/marknadal`, and then return the object it finds associated with it. For more information, including how to save relational or document based data, [check out the wiki](https://github.com/amark/gun/wiki).\r\n\r\n---\r\n\r\n## YOU\r\nWe're just getting started, so join us! Being lonely is never any fun, especially when programming.\r\nI want to help you, because my goal is for GUN to be the easiest database ever.\r\nThat means if you ever get stuck on something for longer than 5 minutes,\r\nyou should talk to me so I can help you solve it.\r\nYour input will then help me improve gun.\r\nWe are also really open to contributions! GUN is easy to extend and customize:\r\n\r\n`Gun.on('opt').event(function(gun, opt){ /* Your module here! */  })`\r\n\r\nIt is also important to us that your database is not a magical black box.\r\nSo often our questions get dismissed with \"its complicated hard low level stuff, let the experts handle it.\"\r\nAnd we do not think that attitude will generate any progress for people.\r\nInstead, we want to make everyone an expert by actually getting really good at explaining the concepts.\r\nSo join our community, in the quest of learning cool things and helping yourself and others build awesome technology. \r\n\r\n - [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/amark/gun?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) (all chats relating to GUN and development should be here! IRC style)\r\n - Google Group: https://groups.google.com/forum/#!forum/g-u-n (for slower threaded discussions)\r\n\r\n## Ahead\r\n- ~~Realtime push to the browser~~\r\n- ~~Persistence in the browser~~\r\n- Authorization callbacks\r\n- ~~Graph manipulation~~\r\n- Server to server communication\r\n- Test more\r\n- Bug fixes\r\n- Data Structures:\r\n - ~~Groups~~\r\n - Linked Lists\r\n - Collections (hybrid: linked-groups/paginated-lists)\r\n - CRDTs\r\n - OT\r\n- Query:\r\n - SQL\r\n - MongoDB Query Documents\r\n - Neo4j Cypher\r\n - Gremlin Query Language\r\n",
  "readmeFilename": "README.md",
  "_id": "gun@0.1.4",
  "dist": {
    "shasum": "289bb7883b7535133772256026308217f45d0264"
  },
  "_from": "gun@*",
  "_resolved": "https://registry.npmjs.org/gun/-/gun-0.1.4.tgz"
}
